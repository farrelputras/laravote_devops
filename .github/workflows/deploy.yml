name: Deploy to VM

on:
  ## trigger kalau pipeline/workflow test.yml complete
  workflow_run:
    workflows: ["Laravel CI"]
    types:
      - completed

  ## bukan trigger, jadi bisa secara manual juga lewat UI nya github
  workflow_dispatch:

jobs:
  deploy:
    if: github.event_name == 'workflow_dispatch' || github.event.workflow_run.conclusion == 'success'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Pull Project on Server
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PASSWORD }}
          script: |
            cd ~/laravote_devops
            git pull origin master

      - name: Rebuild Containers
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PASSWORD }}
          script: |
            cd ~/laravote_devops
            docker-compose rm -f db app web || true
            docker-compose build --no-cache
            docker-compose up -d
            docker-compose exec -T app composer install --no-interaction --prefer-dist --optimize-autoloader

      - name: Fresh Deploy Setup
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PASSWORD }}
          script: |
            cd ~/laravote_devops
            docker-compose exec -T app bash -c '
              if [ ! -f .env ] || ! grep -q "APP_KEY=base64" .env; then
                echo "Fresh deploy detected: setting up .env"
                cp .env.example .env
                php artisan key:generate
                sed -i "s/APP_ENV=local/APP_ENV=production/" .env
                sed -i "s/APP_DEBUG=true/APP_DEBUG=false/" .env
                sed -i "s|APP_URL=.*|APP_URL=http://20.106.186.136|" .env
                php artisan config:clear
                php artisan config:cache
              else
                echo ".env already exists with APP_KEY, skipping fresh setup."
              fi
            '

      - name: Migrate Database & Link to Image Storage
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PASSWORD }}
          script: |
            cd ~/laravote_devops
            echo "Waiting for MySQL..."
            docker-compose exec -T db bash -c 'until mysql -uroot -e "SHOW DATABASES;" > /dev/null 2>&1; do echo "Waiting..."; sleep 2; done'
            docker-compose exec -T app bash -c 'until mysqladmin ping -hdb --silent; do echo "Waiting (app)..."; sleep 2; done'
            docker-compose exec -T app php artisan storage:link
            docker-compose exec -T app php artisan migrate --force

      - name: Seeder
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PASSWORD }}
          script: |
            cd ~/laravote_devops
            docker-compose exec -T app bash -c '
              if [ ! -f .env ] || ! grep -q "APP_KEY=base64" .env; then
                echo "Running seeder because this looks like a fresh deploy..."
                php artisan db:seed --force
              else
                echo "Seeder skipped: .env already exists and APP_KEY is set."
              fi
            '

      - name: Set Folder Permissions
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PASSWORD }}
          script: |
            cd ~/laravote_devops
            docker-compose exec -T app chown -R www-data:www-data storage bootstrap/cache
            docker-compose exec -T app chmod -R 775 storage bootstrap/cache

      - name: Restart Nginx
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VM_HOST }}
          username: ${{ secrets.VM_USER }}
          password: ${{ secrets.VM_PASSWORD }}
          script: |
            sudo systemctl reload nginx || sudo systemctl restart nginx
